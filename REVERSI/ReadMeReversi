README:


OVERVIEW
This program serves to represent a Reversi game. A Reversi game is a 2 player game that utilizes
tiles and a board. The Reversi game represented in this program utilizes a board made of hexagons.
A move is legal if the tile placed by the player sandwiches the tile(s) of the other player, with
another of the player’s tile at the end. As the board is made of hexagons, tiles can be placed in 3
directions, horizontal, diagonal left to right, and diagonal right to left. A game is over if both
players pass consecutively, a player is out of tiles on the board, or the board is full. A game is
won by the player with the most pieces at the end of the game. A game always starts with the black
tile being placed first. This implementation assumes that the user has a base level knowledge of
coordinate systems and basic game strategy. Some forms of extensibility envisioned are multiple
players, as different Enumerations of players could be provided.



QUICK START
To start the program type in the command line as your args for the main method:
1. First, you will pick the type of board to play on: "hexagon" for a hexagonal game board, or
"square" for a square game board.
2. Next, enter a natural number to customize the side of the board. The number entered will be the
number of cells in the side of a square or hexagon board. You may also choose the not enter
anything here, and the board will be the default size: 4 for hexagon, 8 for square.
3. Now, enter the type of player you want player 1 to be. Enter "human" for a human player, and
"easy", "medium", or "hard" for various difficulties for an AI player.
4. Finally, you will enter the same as above, but for player 2.

EXAMPLES OF VALID COMMAND LINES:
"hexagon human human"
"hexagon 5 easy hard"
"square medium human"
"square 6 human easy"

NOTE:
The game also offers  hint mode. When a cell is clicked on, if hint mode is enabled, the cell will
show the number of cells the player would gain by making a move to that cell.
A player can activate/deactivate hint mode by clicking the key 'h'.





INDICATING A PLAYER MOVE AND PLAYER PASS

PLAYER MOVE: To indicate a player move, highlight the cell to move to and type “m”, “M”,
“/n” (enter key), or “ “ (space key). This will indicate a move to the selected cell, and will
deselect the cell. If the user tries to do this without selecting a cell first, the system will
print a message saying to select a cell first.

PLAYER PASS: To indicate a player pass, type “p” or “P”. This will deselect any selected cells,
if there are any.







SOURCE ORGANIZATION
1. The controller package contains all elements needed to control the game, including various
features interfaces, and the controller class.

2. The model package contains all classes and interfaces that represent a model of a reversi game.
This includes classes for cells, different game models, players, and all of their associated
interfaces.

3. The player package contains the classes and interface that are used to create an AI player.
Although there is a human player class, nothing actually happens here because human player interact
with the view to make moves.

4. The strategy package contains all elements that help an AI player decide where to move to or to
pass. All classes implement one interface, and have one essential method, that is 'chooseMove'.

5. Lastly, there is a view package which contains information for both the gui and textual view.








KEY COMPONENTS

CONTROLLER:

1. ModelFeatures interface: This interface represents the possible player actions that can interact
with the model and affect the view. The update method updates the required visuals to represent
the updated model. The notifyPlayerTurn method alerts the player to their turn, or required action.
The makeMoveIfAI method correctly makes a move if the player is an AI player. The displayGameOver
method alters the display pending the end of the game.

2. ViewFeatures interface: This interface represents the possible player actions that interact with
the view and alter the model. ViewFeatures contains PlayerMove, which takes in a pair of integers
representing coordinates, and PlayerPass. PlayerMove moves the player to the indicated position on
the press of the correct key. PlayerPass has the player pass their turn when they press ‘p’.

3. PlayerFeatures interface: This interface performs player actions when it is a player’s turn. It is
primarily used for AI players, as no moves are made automatically for a human player. The
MakeAIMove and MakeAIPass methods are called when the controller checks if the player is AI and if
it is that player’s turn, and calls “player.makeMove().” This requires communication from the
model to the controller, to the player, back to the controller.

4. ReversiController class: this class implements all of the features interfaces and is where all
actions in the game are carried out. A ReversiController takes in any model, any view, and any
player and communicates between the three using the features interfaces.


MODEL:
1. ReversiModel interface: represents the primary model of a Reversi game and playing methods to be
called during a game.

2. ReadOnlyReversiModel interface: an interface that represents anything one can observe in a
game of Reversi. This interface contains methods about the current state of the game, but none that
can alter the state of the game. This is passed into the view, and the ReversiModel interface
extends it.

3. AbstractedReversiModel: an abstract class that implements a reversi model and contains all code
that is the same for both a square and hexagonal game model.

4. BasicReversi class: implements ReversiModel interface and represents a game of hexagonal reversi.
This class implements methods that are called in a Reversi game and keeps track of important
information in a game. This class keeps track of the game board in the game, whether the game has
started, the current player turn, and the most recent moves made by a player. It alters the
gameboard and executes moves made by players.

5. SquareReversi class: implements ReversiModel interface and represents a game of square reversi.
This class implements methods that are called in a Reversi game and keeps track of important
information in a game. This class keeps track of the game board in the game, whether the game has
started, the current player turn, and the most recent moves made by a player. It alters the
gameboard and executes moves made by players.

6. Cell interface: represents a cell of any type on the game board of a game of reversi. Contains
methods and fields to keep track of information within an individual cell.

7. HexagonCell class: represent a singular cell in a reversi game board. This class holds methods
on a cell, such as changing the state, and keeps track of important information about each cell.
The cell keeps track of the state, or what type of PlayerEnum occupies it, and its position in
axial coordinates, which represents its position on the hexagonal reversi game board. The cell is
used in BasicReversi as a representation of the physical board.

8. SquareCell class: represent a singular cell in a reversi game board. This class holds methods
on a cell, such as changing the state, and keeps track of important information about each cell.
The cell keeps track of the state, or what type of PlayerEnum occupies it, and its position in
x/y coordinates, which represents its position on the square reversi game board. The cell is
used in SquareReversi as a representation of the physical board.

9. Player interface: represents a type of player in a game of Reversi. This does not represent
players that can control the game, but the players that can occupy a cell in a game, such as
player X and player O.

10. PlayerEnum enumeration: implements the player interface and represents the different types of
players that can occupy a cell. Either player X, player O, or empty.


PLAYER:

1. ActivePlayer interface: This interface represents a player of the game. Notably, this interface
contains the method makeMove() which makes a move for the player, adjusting the model accordingly.
Additionally, the interface has the methods getPlayer and isHumanPlayer, which return information
about the player this interface represents.

2. HumanPlayer class: This class implements the ActivePlayer interface. It represents a player that
is an active human player making move choices on its own. In the makeMove method the player makes
the move themselves.

3. AIPlayer class: This class implements the ActivePlayer interface. It represents an AI player that
decides moves based on its inherent strategy. In the makeMove method the player uses the strategy
to choose the coordinate of the desired piece on the board.


STRATEGY
1. Coord class: this class represents an axial coordinate on the reversi game board.

2. Strategy interface: this interface represents a strategy in a reversi game that helps a play
choose where to make a move. This guarantees a method, chooseCoord, that returns the coordinates
of the cell that a player should move to, depending on the strategy.

3. ReversiStrategy abstract class: this class implements Strategy. The method chooseCoord is
abstract, but this class contains several helper methods that are utilized in many of the
different types of strategies.

4. CaptureMostPieces class: this class extends ReversiStrategy. This class represents a strategy
where a player moves to whatever cell on the game board that gains them the most new pieces. The
chooseCoord method filters through all coordinates that are valid moves and returns the one that
gets the most new pieces. If there are no valid moves, the method returns null.

5. AvoidCorners class: this class extends ReversiStrategy. This represents a strategy where a
player avoids making a move to a cell that is next to a corner, to avoid giving the other player
an opportunity to move to a corner. The chooseCoord method filters out any cells that are next to
a corner and then picks the cell that gains the most new pieces. If there are no valid moves to
cells that are not next to corners, the method returns null.

6. GoForCorners class: this class extends ReversiStrategy. This represents a strategy where a
player attempts to make a move to a corner on the Reversi board. The method chooseCoord filters
out all the valid cells that are not in corners and then returns the corner cell that gains the
player the most new pieces. If there are no valid moves to any corner cells, the method returns
null.

7. TryTwo class: this class extends ReversiStrategy. This represents a strategy that combines
two other strategies. In the chooseCoord method, if the first strategy returns null, the method
will refer to the second strategy. This allows you to combine two or more strategies to make a
smarter strategy. If all strategies return null, the method will return null indicating a player
pass.


VIEW:

1. ReversiView interface: represents a view of any type of a reversi game. All implementations of
this take in a ReversiModel and display it in a specific way.

2. ReversiTextualView class: this class represents a textual view of a reversi game model. In this
class, the components of the model are represented as strings. An empty cell in the game board is
displayed as “_”, while a cell occupied by a player is displayed as “X” for player x, and “O” for
player o. The textual view also holds the shape of the hexagonal game board. Is driven by the
changes made to the model in BasicReversi.


GUI

1. FrameView interface: represents the frame of a gui view of a game of reversi. Implements
ReversiView and contains the panel.

2. PanelView interface: represents the view of the game, shows all of the information from the
model, including the game board. This class is responsible for setting the background color,
adding all of the hexagons from the game board onto the screen, and tracking the key and
mouse events.

3. ReversiFrame class: this is a class that implements FrameView. This class adds the panel into
the frame, and adds a model into the panel.

4. AbstractedReversiPanel: represents the inside of the panel in the Reversi game and contains all
methods that are the same in a game of square or hexagon reversi.

4. ReversiPanel class: extends the AbstractedReversiPanel class. This holds a method to paint a
BasicReversi (hexagon Reversi) model game board onto the screen.

5. SquareReversiPanel class: extends the AbstractedReversiPanel class. Holds a method to paint a
SquareReversi model game board onto the screen.

6. Hexagon class: this class represents an image of a singular hexagon cell in the reversi
game board. The hexagon takes in a hexagonCell from the game board in the model, a boolean
isClicked, which keeps track of if the hexagon is selected, and x/y coordinates. These coordinates
represent the pixel coordinates of the center of the hexagon cell onto the screen. This class
contains methods to draw the hexagon and keeps track of the color that the hexagon should be,
as well as where on the board a hexagon should be.

7. Square class: this class represents an image of a singular square cell in the reversi game
board. The hexagon takes in a squareCell from the game board in the model, a boolean isClicked,
which keeps track of if the hexagon is selected, and x/y coordinates. These coordinates
represent the pixel coordinates of the center of the square cell onto the screen. This class
contains methods to draw the square and keeps track of the color that the square should be,
as well as where on the board a square should be.